# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/secops/pipelines/languages/javascript

pool:
  vmImage: 'Ubuntu 20.04'

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '12.x'
  displayName: 'Install Node.js'

- script: |
    sudo apt-get install -y uuid
  displayName: 'Install a UUID generator'

- script: |
    # Install cosign to allow you to sign & check container images. You'd probably want to pull it from a
    # known registry, but in this case we're going to build it from scratch
    #docker pull bitnami/cosign
    git clone https://github.com/sigstore/cosign
    cd cosign
    go install ./cmd/cosign
    cd ..
    PATH=./cosign:$PATH
    #$(go env GOPATH)/bin/cosign

    # You'd probably want to use a password from some sort of secrets store, but this is just a demo so...
    COSIGN_PASSWORD=abc123

    # Generate a key pair for cosign to use. 
    # This command will generate consign.pub (public key) & cosign.key (private key) files
    # For a real project, you'd definitely want to move the private key into some sort of secrets store, but this is just a demo...
    COSIGN_PASSWORD=$COSIGN_PASSWORD $(go env GOPATH)/bin/cosign generate-key-pair
  displayName: 'Install & setup cosign'

- script: |
    # Run shellcheck over azure-pipelines.yml
    docker run -v $(pwd):/mnt koalaman/shellcheck -C azure-pipelines.yml
    
    # Don't fail if any problems found...
    echo $?
  displayName: 'shellcheck Azure pipeline file'

- script: |
    # Install the app and all its dependencies
    npm install
  displayName: 'npm install and build'

- script: |
    # Create a Docker container to hold the code & store it in a registry

    # Normally you'd use a 'real' Docker registry, but for a demo we're just going to use an ephemeral image store &
    # an ephemeral name for the image. The image in the registry is set to expire after 1 hour, which is fine for a demo
    IMAGE_NAME=$(uuid)
    docker build -t ttl.sh/${IMAGE_NAME}:1h .
    docker push ttl.sh/${IMAGE_NAME}:1h

    # Now sign the image we've just built with a timestamp & a git commit ID
    COSIGN_PASSWORD=$COSIGN_PASSWORD $(go env GOPATH)/bin/cosign sign --key cosign.key -a git_commit=$(git rev-parse HEAD) ttl.sh/${IMAGE_NAME}:1h

    # Now verify the signed image against the public key
    $(go env GOPATH)/bin/cosign verify --key cosign.pub ttl.sh/${IMAGE_NAME}:1h | jq .
  displayName: 'Build & store container image to a registry, then sign the image'

- script: |
    # Use Trivy to scan the container image
    #docker run aquasec/trivy image ttl.sh/${IMAGE_NAME}:1h

    # COSIGN_PASSWORD=$COSIGN_PASSWORD $(go env GOPATH)/bin/cosign sign --key cosign.key -a trivy_check=passed ttl.sh/${IMAGE_NAME}:1h
  displayName: 'Run Trivy check against container image'
  
- script: |
    npm run unittests

    # If unit tests all pass, we sign the image with a permanent record to attest to this
    #if [ $? -eq 0 ]; then COSIGN_PASSWORD=$COSIGN_PASSWORD $(go env GOPATH)/bin/cosign sign --key cosign.key -a unit_tests=passed ttl.sh/${IMAGE_NAME}:1h; fi
  displayName: 'Run unit tests'

- script: |
    # First gather lines-of-coverage data from the test cases
    # node_modules/nyc/bin/nyc.js --reporter=lcov --reporter=text-lcov npm test
    #sudo apt-get update && sudo apt install default-jre default-jdk

    docker run \
    --rm \
    -e SONAR_HOST_URL="https://sonarcloud.io" \
    -e SONAR_LOGIN="8725538bd2603c6990da57d9c53afe2d176fb844" \
    -v $(pwd):/usr/src \
    sonarsource/sonar-scanner-cli \
    -Dsonar.projectKey=monch1962_hello-world-secops \
    -Dsonar.organization=monch1962-github \
    -Dsonar.exclusions=node_modules/**,tests/**,coverage/** \
    -Dsonar.host.url=https://sonarcloud.io \
    -Dsonar.javascript.lcov.reportPaths=app/coverage/**

    # Once Sonar Scanner completes, sign the image with a permanent record to attest to this
    #if [ $? -eq 0 ]; then COSIGN_PASSWORD=$COSIGN_PASSWORD $(go env GOPATH)/bin/cosign sign --key cosign.key -a code_quality=passed ttl.sh/${IMAGE_NAME}:1h; fi

  displayName: 'Run sonarcloud code quality tests'

- script: |
    # Install the testcafe framework; we're going to use it for UI testing
    npm install -g testcafe

    # Install Testcafe's XUnit reporting module
    npm install -g testcafe-reporter-xunit

    # Install GUID library
    # npm install --save-dev guid-typescript

    # Start the app running, and save the PID
    node helloworld.js &
    APP_PID=$!

    # Run all available UI tests on multiple browsers, and save results in XUnit format
    testcafe "chrome:headless,firefox:headless,chrome:headless:emulation:device=iphone X,chrome:headless:emulation:device=Galaxy S5,chrome:headless:emulation:device=Pixel 2,chrome:headless:emulation:device=iPad" tests/ui/** --reporter xunit --screenshots . > TEST-uitests.xml

    # Once UI tests complete, sign the image with a permanent record to attest to this
    #if [ $? -eq 0 ]; then COSIGN_PASSWORD=$COSIGN_PASSWORD $(go env GOPATH)/bin/cosign sign --key cosign.key -a ui_tests=passed ttl.sh/${IMAGE_NAME}:1h; fi

    cat TEST-uitests.xml

    # Kill the app
    kill $APP_PID
  displayName: 'Run UI tests'

- script: |
    # Start the app running and save the PID
    node helloworld.js &
    APP_PID=$!

    # Grab a copy of wilee (you'd probably want to get it from somewhere like Artefactory or Nexus...)
    wget https://www.dropbox.com/s/sthv0p77c5gip2g/wilee?dl=0 -O wilee
    chmod +x wilee
    ls -l wilee

    # Run all API tests in test/api/*.wilee.json
    APP=http://localhost:8080 TESTCASES=tests/api/*.wilee.json ./wilee

    # If wilee fails with errors, kill the app instance and exit 1 so secops can see the failure
    if [ $? -ne 0 ]; then kill $APP_PID && exit 1; fi

    # API tests have passed, so sign the image with a permanent record to attest to this
    #COSIGN_PASSWORD=$COSIGN_PASSWORD $(go env GOPATH)/bin/cosign sign --key cosign.key -a api_tests=passed ttl.sh/${IMAGE_NAME}:1h


    # Don't need the app any more; kill it
    kill $APP_PID

    # Let's display the summary of the integration test results
    TESTRESULTS=$(cat tests/api/*.result.json)
    echo $TESTRESULTS | jq '.'
    echo $TESTRESULTS | jq 'del(.request, .expect, .actual)'

    # If there's any failed test cases, then exit 1 so secops can see the failure
    FAILED_TESTS=$(echo $TESTRESULTS | jq '.pass_fail' | grep fail | wc -l)
    if [ $FAILED_TESTS -gt 0 ]; then echo $FAILED_TESTS "API tests failed" && exit 1; fi
  displayName: 'Run wilee API tests'

- script: |
    # Now start the app running, and capture the PID so we can kill it later
    # Note that we're setting HTTP_PROXY to point to the Hoverfly stub, which we'll start next
    HTTP_PROXY=http://localhost:8500 node helloworld.js &
    APP_PID=$!

    # Get the hoverfly stub engine
    wget https://github.com/SpectoLabs/hoverfly/releases/download/v0.17.7/hoverfly_bundle_linux_amd64.zip -O hoverfly.zip
    unzip hoverfly.zip

    # Start hoverfly running, and read in the stub config. In this case we're going to stub out 
    # the (fictional) trumpwall.com site
    ./hoverctl start
    ./hoverctl import tests/integration/stub-definitions/trumpwall.com.stub.json

    # Run the stubbed integration tests, which try to hit http://trumpwall.com via the /trumpwall endpoint
    # If any tests fail, exit 1 to fail this step in the pipeline
    npm run integrationtests
    if [ $? -ne 0 ]; then kill $APP_PID && ./hoverctl stop && exit 1; fi

    # Integration tests have passed, so sign the image with a permanent record to attest to this
    #COSIGN_PASSWORD=$COSIGN_PASSWORD $(go env GOPATH)/bin/cosign sign --key cosign.key -a integration_tests=passed ttl.sh/${IMAGE_NAME}:1h


    # Stop Hoverfly
    ./hoverctl stop

    # Kill the app
    kill $APP_PID
  displayName: 'Run integration tests (against stubbed backend)'

- script: |
    # Start the app running, and capture the PID so we can kill it later
    node helloworld.js &
    APP_PID=$!

    # Install the Axe CLI accessibility testing tool
    npm install -g axe-cli
    axe --help

    # Run the Axe accessibility tests (if there's more pages to test, just give it a comma-separated list of URLs)
    # Appending --exit will cause the tests to exit 1 if problems are found. This could be handy but I'm not using it yet
    axe http://localhost:8080 --exit

    # Accessibility tests have passed, so sign the image with a permanent record to attest to this
    #COSIGN_PASSWORD=$COSIGN_PASSWORD $(go env GOPATH)/bin/cosign sign --key cosign.key -a accessibility_tests=passed ttl.sh/${IMAGE_NAME}:1h


    # Kill the app
    kill $APP_PID
  displayName: 'Run Axe accessibility tests'
  
- script: |
    # This isn't a real application that we're testing, so let's test a 'real' web site as part of the pipeline
    # Note that these tests may take an extended period to execute depending on depth of coverage, and results won't be relevant to developers
    # - primary audience is SecOps
    # You'd typically only run these tests in CD against e.g. a blue/green production candidate immediately prior to bringing it online
    # You might also choose to run these tests on a timed schedule (e.g. 2am each day) to provide ongoing assurance for production

    WEBSITE=https://nmap.org

    # Grab a copy of htrace.sh
    git clone https://github.com/trimstray/htrace.sh.git

    # Build a htrace.sh Docker container
    cd htrace.sh && build/build.sh
    #docker build --rm -t htrace.sh -f Dockerfile .

    # Run htrace.sh tests against the nominated web site
    docker run --rm -t --name htrace.sh htrace.sh -u $WEBSITE -s -h #--testssl --observatory --ssllabs --mixed-content --nse --waf --dns --http2
  displayName: 'Run http/https security checks'

- script: |
    # Start the app running, and capture the PID so we can kill it later
    node helloworld.js &
    APP_PID=$!

    # Install the artillery load testing tool
    npm install -g artillery
    artillery -V

    # Run the artillery load test
    #artillery run -o TEST-artillery.json test/performance/performance.yml
    artillery run tests/performance/performance.yml

    # If test fails, exit 1 to fail this step in the pipeline
    if [ $? -ne 0 ]; then kill $APP_PID && exit 1; fi

    # Performance tests have passed, so sign the image with a permanent record to attest to this
    #COSIGN_PASSWORD=$COSIGN_PASSWORD $(go env GOPATH)/bin/cosign sign --key cosign.key -a performance_tests=passed ttl.sh/${IMAGE_NAME}:1h

    # Generate the Artillery test report
    #artillery report TEST-artillery.json

    #ls -l

    # Display Artillery test results in log
    #cat TEST-artillery.json
    
    # Kill the app
    kill $APP_PID
  displayName: 'Run Artillery performance test'

- script: |
    # All tests have now passed, so the next step would normally be to deploy the container
    # Before deploying the container, all these immutable signatures we've saved during CI can be validated to ensure
    # the image we're about to deploy hasn't been changed

    # In this case we're just going to display the signatures, but we could also write some logic to ensure all CI tasks have been
    # completed (by checking the tags that should have been created) before deploying
    $(go env GOPATH)/bin/cosign verify --key cosign.pub ttl.sh/${IMAGE_NAME}:1h | jq '.[].optional'
  displayName: 'Display signatures for the container image'

# Publish Test Results
# Publish Test Results to Azure Pipelines/TFS
#- task: PublishTestResults@2
#  inputs:
#    testResultsFormat: 'xUnit' # Options: JUnit, NUnit, VSTest, xUnit
#    testResultsFiles: '**/TEST-*.xml' 
#    #searchFolder: '$(System.DefaultWorkingDirectory)' # Optional
#    #mergeTestResults: false # Optional
#    #testRunTitle: 'Integration' # Optional
#    #buildPlatform: # Optional
#    #buildConfiguration: # Optional
#    #publishRunAttachments: true # Optional
- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testRunner: JUnit
    testResultsFiles: '**/TEST-*.xml'

# Copy Files
# Copy files from source folder to target folder using match patterns (The match patterns will only match file paths, not folder paths)
- task: CopyFiles@2
  inputs:
    sourceFolder: $(Build.SourcesDirectory)
    contents: |
      2*/**/*.png
      !2*/**/thumbnails/*.png
    targetFolder: $(Build.ArtifactStagingDirectory)
    #cleanTargetFolder: false # Optional
    #overWrite: false # Optional
    #flattenFolders: false # Optional

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: UI-test-screenshots
    
- task: PublishCodeCoverageResults@1
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  inputs:
    codeCoverageTool: cobertura
    summaryFileLocation: '**/cobertura-coverage.xml'
